# Ex.No: 10 Learning â€“ Use Supervised Learning  
### DATE:                                                                            
### REGISTER NUMBER : 
### AIM: 
To write a program to train the classifier for -----------------.
###  Algorithm:
1. Import necessary libraries: pandas, re, seaborn, sklearn's TfidfVectorizer, matplotlib, and WordCloud.
2. Download NLTK stopwords.
3. Import the dataset.
4. Preprocessing and Cleaning the Reviews
5. Analysis of the Dataset,Count positive and negative sentiment labels and Create a WordCloud for positive reviews.
6. Use TF-IDF to convert text data into vectors.
7. Split the dataset into training and testing sets,Train a Decision Tree Classifier,Evaluate the model's accuracy and Plot the confusion matrix.

### Program:

```
import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import re
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
import matplotlib.pyplot as plt
from wordcloud import WordCloud


import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords


data = pd.read_csv('flipkart_data.csv')
data.head()


# unique ratings
pd.unique(data['rating'])


sns.countplot(data=data,
			x='rating',
			order=data.rating.value_counts().index)


# rating label(final)
pos_neg = []
for i in range(len(data['rating'])):
	if data['rating'][i] >= 5:
		pos_neg.append(1)
	else:
		pos_neg.append(0)

data['label'] = pos_neg


from tqdm import tqdm


def preprocess_text(text_data):
	preprocessed_text = []

	for sentence in tqdm(text_data):
		# Removing punctuations
		sentence = re.sub(r'[^\w\s]', '', sentence)

		# Converting lowercase and removing stopwords
		preprocessed_text.append(' '.join(token.lower()
										for token in nltk.word_tokenize(sentence)
										if token.lower() not in stopwords.words('english')))

	return preprocessed_text


import nltk
nltk.download('punkt')


preprocessed_review = preprocess_text(data['review'].values)
data['review'] = preprocessed_review


data.head()


data["label"].value_counts()


consolidated = ' '.join(
	word for word in data['review'][data['label'] == 1].astype(str))
wordCloud = WordCloud(width=1600, height=800,
					random_state=21, max_font_size=110)
plt.figure(figsize=(15, 10))
plt.imshow(wordCloud.generate(consolidated), interpolation='bilinear')
plt.axis('off')
plt.show()


cv = TfidfVectorizer(max_features=2500)
X = cv.fit_transform(data['review'] ).toarray()


X


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, data['label'],
													test_size=0.33,
													stratify=data['label'],
													random_state = 42)


from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier(random_state=0)
model.fit(X_train, y_train)

# Testing the model
pred = model.predict(X_train)
print(accuracy_score(y_train, pred))


from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

cm = confusion_matrix(y_train, pred)

cm_display = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[False, True])

# This line is missing plt.figure() which initializes a new figure
plt.figure()
cm_display.plot()
plt.show()

```



### Output:


### Result:
Thus the system was trained successfully and the prediction was carried out.
